---
- name: Launch EC2 instance
  ec2:
        key_name: "{{ ssh_keypair }}"
        instance_type: "{{ instance_type }}"
        image: "{{ dbg_baseImage_id }}"
        wait: true
        region: "{{ our_region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        group_id: "{{ security_group_id }}"
        assign_public_ip: no
        instance_profile_name: "{{ iam_role }}"
        volumes:
        # Allocation for system
        - device_name: /dev/sda1
          volume_size: 40
          delete_on_termination: true
          volume_type: gp2
        # For creation
        - device_name: /dev/sdb
          volume_size: 40
          delete_on_termination: true
          volume_type: gp2
        instance_tags:
          Name: "{{ my_tag_name }}"
          Owner: "{{ ec2_owner }}"
          Creator: "{{ ec2_owner }}"
          CostCenter: "{{ my_tag_costcenter }}"
          Product: "{{ my_tag_product }}"
          Scheduled: "true"
        exact_count: "{{ number_of_machines }}"
        count_tag:
          Name: "{{ my_tag_name }}"
          CostCenter: "{{ my_tag_costcenter }}"
          Product: "{{ my_tag_product }}"
  register: ec2

- name: Add new instance to host group
  add_host:
        hostname: "{{ item.private_ip }}"
        groupname: dev_instances
  with_items: "{{ ec2.instances }}"

- name : Get volumes ids
  ec2_vol :
        region : "{{ our_region }}"
        instance : "{{ item }}"
        state : list
  with_items : "{{ ec2.instance_ids }}"
  register : ec2_instances_volumes
  loop_control :
        label : "{{ item }}"

- name : Tag volumes
  ec2_tag :
        region : "{{ our_region }}"
        resource : "{{ item.1.id }}"
        tags :
          Name: "{{ my_tag_name }}"
          Owner: "{{ ec2_owner }}"
          Creator: "{{ ec2_owner }}"
          CostCenter: "{{ my_tag_costcenter }}"
          Product: "{{ my_tag_product }}"
          ApplicationID: "AID066"
          Environment: "Development"
  with_subelements:
        - "{{ ec2_instances_volumes.results }}"
        - volumes

- name: Wait for SSH to come up
  wait_for: host={{ item.private_ip }} port=22 delay=60 timeout=240 state=started
  with_items: '{{ ec2.instances }}'
