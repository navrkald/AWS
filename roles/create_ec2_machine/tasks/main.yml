---
- name: Launch EC2 instance
  ec2:
        key_name: "{{ ssh_keypair }}"
        instance_type: "{{ instance_type }}"
        image: "{{ dbg_baseImage_id }}"
        wait: true
        region: "{{ our_region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        group_id: "{{ security_group_id }}"
        assign_public_ip: no
        instance_profile_name: "{{ iam_role }}"
        volumes:
        # Allocation for system
        - device_name: /dev/sda1
          volume_size: 10
          delete_on_termination: true
          volume_type: gp2
        # For creation
        - device_name: /dev/sdb
          volume_size: 5
          delete_on_termination: true
          volume_type: gp2
        instance_tags:
          Name: "{{ tag_name }}"
          Owner: "{{ ec2_owner }}"
          Creator: "{{ ec2_owner }}"
          CostCenter: "{{ tag_costcenter }}"
          Product: "{{ tag_product }}"
          ApplicationID: "{{ tag_ApplicationID }}"
          CreatorCompany: "{{ tag_CreatorCompany  }}"
          CreatorDepartment: "{{ tag_CreatorDepartment }}"
          Environment: "{{ tag_Environment }}"
        exact_count: "{{ number_of_machines }}"
        count_tag:
          Name: "{{ tag_name }}"
          CostCenter: "{{ tag_costcenter }}"
          Product: "{{ tag_product }}"
  register: ec2

#- debug:
#        var: ec2

#- debug:
#        var: ec2.instance_ids

# TODO check for null

#- name: Add new instance to host group
#  add_host:
#        hostname: "{{ item.private_ip }}"
#        groupname: dev_instances
#  with_items: "{{ ec2.tagged_instances }}"


- name: Retrieve all volumes for a queried instance
  ec2_vol:
    instance: '{{ item.id }}'
    region: "{{ our_region }}"
    state: list
  with_items: '{{ ec2.tagged_instances }}'
  register: ec2_vol

- name: debug ec2_vol.results[0].volumes
  debug: 
        var: ec2_vol.results[0].volumes

- name: Loop over ec2_vol.results[0].volumes
  debug:
        var: "{{ item }}"
  with_items: "{{ ec2_vol.results[0].volumes }}"

- name: Loop over ec2_vol.results[0].volumes.id
  debug:
        msg: "{{ item.1.id }}"
  with_subelements:
        - "{{ ec2_vol.results }}"
        - volumes


- name: Ensure all volumes are tagged
  ec2_tag:
    region: "{{ our_region }}"
    resource: "{{ item.1.id }}"
    state: present
    tags:
          Name: "{{ tag_name }}"
          Owner: "{{ ec2_owner }}"
          Creator: "{{ ec2_owner }}"
          CostCenter: "{{ tag_costcenter }}"
          Product: "{{ tag_product }}"
          ApplicationID: "AID066"
          Environment: "Development"
  with_subelements:
    - "{{ ec2_vol.results }}"
    - volumes

- Name: make sure to start given machines
  ec2:
        region: "{{ our_region }}"
        instance_tags:
          Name: "{{ tag_name }}"
          Owner: "{{ ec2_owner }}"
          Creator: "{{ ec2_owner }}"
          CostCenter: "{{ tag_costcenter }}"
          Product: "{{ tag_product }}"
          ApplicationID: "{{ tag_ApplicationID }}"
          CreatorCompany: "{{ tag_CreatorCompany  }}"
          CreatorDepartment: "{{ tag_CreatorDepartment }}"
          Environment: "{{ tag_Environment }}"
        state: running

- name: Wait for SSH to come up
  wait_for: host={{ item.private_ip }} port=22 delay=60 timeout=240 state=started
  with_items: '{{ ec2.tagged_instances }}'
